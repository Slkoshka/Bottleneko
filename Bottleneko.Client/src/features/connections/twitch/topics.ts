import { TwitchSubscriptionTopic } from '../../api/dtos.gen';

export interface TwitchSubscriptionTopicInfo {
    name: string;
    description: string;
    target: 'self' | 'mod' | 'any';
    cost: number;
    infoUrl: string;
}

const make = (name: string, description: string, target: 'self' | 'mod' | 'any', cost: number, infoUrl: string) => {
    return { name, description, target, cost, infoUrl };
};

export const topicsInfo = new Map<TwitchSubscriptionTopic, TwitchSubscriptionTopicInfo>();

// Only available on the user's channel
// info.set(TwitchSubscriptionTopic.ChannelBitsUse, make('channel.bits.use', 'A notification is sent whenever Bits are used on a channel. Requires <code>bits:read</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelbitsuse'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelCheer, make('channel.cheer', 'A notification is sent whenever Bits are used on the specified channel. Requires <code>bits:read</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelcheer'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelAdBreakBegin, make('channel.ad_break.begin', 'A midroll commercial break has started running. Requires <code>channel:read:ads</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelad_breakbegin'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelBan, make('channel.ban', 'A viewer is banned from the specified channel. Requires <code>channel:moderate</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelban'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelUnban, make('channel.unban', 'A viewer is unbanned from the specified channel. Requires <code>channel:moderate</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelunban'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelCharityCampaignDonate, make('channel.charity_campaign.donate', 'Sends an event notification when a user donates to the broadcaster’s charity campaign. Requires <code>channel:read:charity</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelcharity_campaigndonate'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelCharityCampaignStart, make('channel.charity_campaign.start', 'Sends an event notification when the broadcaster starts a charity campaign. Requires <code>channel:read:charity</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelcharity_campaignstart'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelCharityCampaignProgress, make('channel.charity_campaign.progress', 'Sends an event notification when progress is made towards the campaign’s goal or when the broadcaster changes the fundraising goal. Requires <code>channel:read:charity</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelcharity_campaignprogress'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelCharityCampaignStop, make('channel.charity_campaign.stop', 'Sends an event notification when the broadcaster stops a charity campaign. Requires <code>channel:read:charity</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelcharity_campaignstop'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelHypeTrainBegin, make('channel.hype_train.begin', 'A Hype Train begins on the specified channel. Requires <code>channel:read:hype_train</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelhype_trainbegin'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelHypeTrainProgress, make('channel.hype_train.progress', 'A Hype Train makes progress on the specified channel. Requires <code>channel:read:hype_train</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelhype_trainprogress'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelHypeTrainEnd, make('channel.hype_train.end', 'A Hype Train ends on the specified channel. Requires <code>channel:read:hype_train</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelhype_trainend'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelGoalBegin, make('channel.goal.begin', 'Get notified when the broadcaster begins a goal. Requires <code>channel:read:goals</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelgoalbegin'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelGoalProgress, make('channel.goal.progress', 'Get notified when progress (either positive or negative) is made towards a broadcaster’s goal. Requires <code>channel:read:goals</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelgoalprogress'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelGoalEnd, make('channel.goal.end', 'Get notified when a broadcaster ends a goal. Requires <code>channel:read:goals</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelgoalend'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelModeratorAdd, make('channel.moderator.add', 'Moderator privileges were added to a user on the specified channel. Requires <code>moderation:read</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelmoderatoradd'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelModeratorRemove, make('channel.moderator.remove', 'Moderator privileges were removed from a user on the specified channel. Requires <code>moderation:read</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelmoderatorremove'));
// info.set(TwitchSubscriptionTopic.ChannelChannelPointsAutomaticRewardRedemptionAdd, make('channel.channel_points_automatic_reward_redemption.add', 'A viewer has redeemed an automatic channel points reward on the specified channel. Requires <code>channel:read:redemptions</code> or <code>channel:manage:redemptions</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchannel_points_automatic_reward_redemptionadd'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelChannelPointsCustomRewardAdd, make('channel.channel_points_custom_reward.add', 'A custom channel points reward has been created for the specified channel. Requires <code>channel:read:redemptions</code> or <code>channel:manage:redemptions</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchannel_points_custom_rewardadd'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelChannelPointsCustomRewardUpdate, make('channel.channel_points_custom_reward.update', 'A custom channel points reward has been updated for the specified channel. Requires <code>channel:read:redemptions</code> or <code>channel:manage:redemptions</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchannel_points_custom_rewardupdate'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelChannelPointsCustomRewardRemove, make('channel.channel_points_custom_reward.remove', 'A custom channel points reward has been removed from the specified channel. Requires <code>channel:read:redemptions</code> or <code>channel:manage:redemptions</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchannel_points_custom_rewardremove'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelChannelPointsCustomRewardRedemptionAdd, make('channel.channel_points_custom_reward_redemption.add', 'A viewer has redeemed a custom channel points reward on the specified channel. Requires <code>channel:read:redemptions</code> or <code>channel:manage:redemptions</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchannel_points_custom_reward_redemptionadd'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelChannelPointsCustomRewardRedemptionUpdate, make('channel.channel_points_custom_reward_redemption.update', 'A redemption of a channel points custom reward has been updated for the specified channel. Requires <code>channel:read:redemptions</code> or <code>channel:manage:redemptions</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchannel_points_custom_reward_redemptionupdate'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelPollBegin, make('channel.poll.begin', 'A poll started on the specified channel. Requires <code>channel:read:polls</code> or <code>channel:manage:polls</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelpollbegin'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelPollProgress, make('channel.poll.progress', 'Users respond to a poll on the specified channel. Requires <code>channel:read:polls</code> or <code>channel:manage:polls</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelpollprogress'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelPollEnd, make('channel.poll.end', 'A poll ended on the specified channel. Requires <code>channel:read:polls</code> or <code>channel:manage:polls</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelpollend'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelPredictionBegin, make('channel.prediction.begin', 'A Prediction started on the specified channel. Requires <code>channel:read:predictions</code> or <code>channel:manage:predictions</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelpredictionbegin'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelPredictionProgress, make('channel.prediction.progress', 'Users participated in a Prediction on the specified channel. Requires <code>channel:read:predictions</code> or <code>channel:manage:predictions</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelpredictionprogress'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelPredictionLock, make('channel.prediction.lock', 'A Prediction was locked on the specified channel. Requires <code>channel:read:predictions</code> or <code>channel:manage:predictions</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelpredictionlock'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelPredictionEnd, make('channel.prediction.end', 'A Prediction ended on the specified channel. Requires <code>channel:read:predictions</code> or <code>channel:manage:predictions</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelpredictionend'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelSubscribe, make('channel.subscribe', 'A notification is sent when the specified channel receives a subscriber. This does not include resubscribes. Requires <code>channel:read:subscriptions</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelsubscribe'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelSubscriptionEnd, make('channel.subscription.end', 'A notification when a subscription to the specified channel ends. Requires <code>channel:read:subscriptions</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelsubscriptionend'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelSubscriptionGift, make('channel.subscription.gift', 'A notification when a viewer gives a gift subscription to one or more users in the specified channel. Requires <code>channel:read:subscriptions</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelsubscriptiongift'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelSubscriptionMessage, make('channel.subscription.message', 'A notification when a user sends a resubscription chat message in the specific channel. Requires <code>channel:read:subscriptions</code> scope.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelsubscriptionmessage'));
topicsInfo.set(TwitchSubscriptionTopic.UserWhisperMessage, make('user.whisper.message', 'The user receives a whisper. Requires <code>user:read:whispers</code> or <code>user:manage:whispers</code> scopes.', 'self', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#userwhispermessage'));

// Require the user to be a mod
topicsInfo.set(TwitchSubscriptionTopic.ChannelFollow, make('channel.follow', 'The specified channel receives a follow. Requires <code>moderator:read:followers</code> scope.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelfollow'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelSuspiciousUserUpdate, make('channel.suspicious_user.update', 'A suspicious user has been updated. Requires <code>moderator:read:suspicious_users</code> scope.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelsuspicious_userupdate'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelSuspiciousUserMessage, make('channel.suspicious_user.message', 'A chat message has been sent by a suspicious user. Requires <code>moderator:read:suspicious_users</code> scope.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelsuspicious_usermessage'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelWarningAcknowledge, make('channel.warning.acknowledge', 'A user awknowledges a warning. Broadcasters and moderators can see the warning’s details. Requires <code>moderator:read:warnings</code> or <code>moderator:manage:warnings</code> scopes.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelwarningacknowledge'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelWarningSend, make('channel.warning.send', 'A user is sent a warning. Broadcasters and moderators can see the warning’s details. Requires <code>moderator:read:warnings</code> or <code>moderator:manage:warnings</code> scopes.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelwarningsend'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelShieldModeBegin, make('channel.shield_mode.begin', 'Sends a notification when the broadcaster activates Shield Mode. Requires <code>moderator:read:shield_mode</code> or <code>moderator:manage:shield_mode</code> scopes.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelshield_modebegin'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelShieldModeEnd, make('channel.shield_mode.end', 'Sends a notification when the broadcaster deactivates Shield Mode. Requires <code>moderator:read:shield_mode</code> or <code>moderator:manage:shield_mode</code> scopes.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelshield_modeend'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelShoutoutCreate, make('channel.shoutout.create', 'Sends a notification when the specified broadcaster sends a Shoutout.Requires <code>moderator:read:shoutouts</code> or <code>moderator:manage:shoutouts</code> scopes.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelshoutoutcreate'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelShoutoutReceive, make('channel.shoutout.receive', 'Sends a notification when the specified broadcaster receives a Shoutout. Requires <code>moderator:read:shoutouts</code> or <code>moderator:manage:shoutouts</code> scopes.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelshoutoutreceive'));
// info.set(TwitchSubscriptionTopic.ChannelUnbanRequestCreate, make('channel.unban_request.create', 'A user creates an unban request. Requires <code>moderator:read:unban_requests</code> or <code>moderator:manage:unban_requests</code> scopes.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelunban_requestcreate'));
// info.set(TwitchSubscriptionTopic.ChannelUnbanRequestResolve, make('channel.unban_request.resolve', 'An unban request has been resolved. Requires <code>moderator:read:unban_requests</code> or <code>moderator:manage:unban_requests</code> scopes.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelunban_requestresolve'));
// info.set(TwitchSubscriptionTopic.ChannelModerate, make('channel.moderate', 'A moderator performs a moderation action in the specified channel. Check the documentation for requirements.', 'mod', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelmoderate'));

// Have cost
topicsInfo.set(TwitchSubscriptionTopic.ChannelUpdate, make('channel.update', 'The broadcaster updates their channel properties e.g., category, title, content classification labels, broadcast, or language.', 'any', 1, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelupdate'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelRaidTo, make('channel.raid', 'The specified channel is raided by another broadcaster’s channel.', 'any', 1, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelraid'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelRaidFrom, make('channel.raid', 'The broadcaster raids another broadcaster’s channel.', 'any', 1, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelraid'));
// info.set(TwitchSubscriptionTopic.ChannelSharedChatBegin, make('channel.shared_chat.begin', 'A notification when a channel becomes active in an active shared chat session.', 'any', 1, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelshared_chatbegin'));
// info.set(TwitchSubscriptionTopic.ChannelSharedChatUpdate, make('channel.shared_chat.update', 'A notification when the active shared chat session the channel is in changes.', 'any', 1, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelshared_chatupdate'));
// info.set(TwitchSubscriptionTopic.ChannelSharedChatEnd, make('channel.shared_chat.end', 'A notification when a channel leaves a shared chat session or the session ends.', 'any', 1, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelshared_chatend'));
topicsInfo.set(TwitchSubscriptionTopic.StreamOnline, make('stream.online', 'The specified broadcaster starts a stream.', 'any', 1, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#streamonline'));
topicsInfo.set(TwitchSubscriptionTopic.StreamOffline, make('stream.offline', 'The specified broadcaster stops a stream.', 'any', 1, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#streamoffline'));
topicsInfo.set(TwitchSubscriptionTopic.UserUpdate, make('user.update', 'The user has updated their account.', 'any', 1, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#userupdate'));

// Available to everyone
// info.set(TwitchSubscriptionTopic.ChannelChatClear, make('channel.chat.clear', 'A moderator or bot has cleared all messages from the chat room. Requires <code>user:read:chat</code> scope.', 'any', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchatclear'));
// info.set(TwitchSubscriptionTopic.ChannelChatClearUserMessages, make('channel.chat.clear_user_messages', 'A moderator or bot has cleared all messages from a specific user. Requires <code>user:read:chat</code> scope.', 'any', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchatclear_user_messages'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelChatMessage, make('channel.chat.message', 'Any user sends a message to a specific chat room. Requires <code>user:read:chat</code> scope.', 'any', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchatmessage'));
// info.set(TwitchSubscriptionTopic.ChannelChatMessageDelete, make('channel.chat.message_delete', 'A moderator has removed a specific message. Requires <code>user:read:chat</code> scope.', 'any', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchatmessage_delete'));
// info.set(TwitchSubscriptionTopic.ChannelChatNotification, make('channel.chat.notification', 'A notification for when an event that appears in chat has occurred. Requires <code>user:read:chat</code> scope.', 'any', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchatnotification'));
// info.set(TwitchSubscriptionTopic.ChannelChatSettingsUpdate, make('channel.chat_settings.update', 'A notification for when the broadcaster’s chat settings are updated. Requires <code>user:read:chat</code> scope.', 'any', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchat_settingsupdate'));
// info.set(TwitchSubscriptionTopic.ChannelChatUserMessageHold, make('channel.chat.user_message_hold', 'A user is notified if their message is caught by automod. Requires <code>user:read:chat</code> scope.', 'any', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchatuser_message_hold'));
// info.set(TwitchSubscriptionTopic.ChannelChatUserMessageUpdate, make('channel.chat.user_message_update', 'A user is notified if their message’s automod status is updated. Requires <code>user:read:chat</code> scope.', 'any', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelchatuser_message_update'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelVipAdd, make('channel.vip.add', 'A VIP is added to the channel. Requires <code>channel:read:vips</code> or <code>channel:manage:vips</code> scopes.', 'any', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelvipadd'));
topicsInfo.set(TwitchSubscriptionTopic.ChannelVipRemove, make('channel.vip.remove', 'A VIP is removed from the channel. Requires <code>channel:read:vips</code> or <code>channel:manage:vips</code> scopes.', 'any', 0, 'https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/#channelvipremove'));
