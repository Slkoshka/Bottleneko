// Generated by Bottleneko.CodeGenerator

export interface DiscordProtocolConfiguration {
    $type: 'Discord';
    token: string;
    receiveEvents: boolean;
    isPresenceIntentEnabled: boolean;
    isServerMembersIntentEnabled: boolean;
    isMessageContentIntentEnabled: boolean;
}

export type ProtocolConfiguration =
    DiscordProtocolConfiguration |
    TelegramProtocolConfiguration |
    TwitchProtocolConfiguration |
    { $type: string };

export interface TelegramProtocolConfiguration {
    $type: 'Telegram';
    token: string;
    receiveEvents: boolean;
}

export enum TwitchSubscriptionTopic {
    ChannelCheer = 'ChannelCheer',
    ChannelUpdate = 'ChannelUpdate',
    ChannelFollow = 'ChannelFollow',
    ChannelAdBreakBegin = 'ChannelAdBreakBegin',
    ChannelChatMessage = 'ChannelChatMessage',
    ChannelSubscribe = 'ChannelSubscribe',
    ChannelSubscriptionEnd = 'ChannelSubscriptionEnd',
    ChannelSubscriptionGift = 'ChannelSubscriptionGift',
    ChannelSubscriptionMessage = 'ChannelSubscriptionMessage',
    ChannelRaidTo = 'ChannelRaidTo',
    ChannelRaidFrom = 'ChannelRaidFrom',
    ChannelBan = 'ChannelBan',
    ChannelUnban = 'ChannelUnban',
    ChannelModeratorAdd = 'ChannelModeratorAdd',
    ChannelModeratorRemove = 'ChannelModeratorRemove',
    ChannelChannelPointsCustomRewardAdd = 'ChannelChannelPointsCustomRewardAdd',
    ChannelChannelPointsCustomRewardUpdate = 'ChannelChannelPointsCustomRewardUpdate',
    ChannelChannelPointsCustomRewardRemove = 'ChannelChannelPointsCustomRewardRemove',
    ChannelChannelPointsCustomRewardRedemptionAdd = 'ChannelChannelPointsCustomRewardRedemptionAdd',
    ChannelChannelPointsCustomRewardRedemptionUpdate = 'ChannelChannelPointsCustomRewardRedemptionUpdate',
    ChannelPollBegin = 'ChannelPollBegin',
    ChannelPollProgress = 'ChannelPollProgress',
    ChannelPollEnd = 'ChannelPollEnd',
    ChannelPredictionBegin = 'ChannelPredictionBegin',
    ChannelPredictionProgress = 'ChannelPredictionProgress',
    ChannelPredictionLock = 'ChannelPredictionLock',
    ChannelPredictionEnd = 'ChannelPredictionEnd',
    ChannelSuspiciousUserUpdate = 'ChannelSuspiciousUserUpdate',
    ChannelSuspiciousUserMessage = 'ChannelSuspiciousUserMessage',
    ChannelVipAdd = 'ChannelVipAdd',
    ChannelVipRemove = 'ChannelVipRemove',
    ChannelWarningAcknowledge = 'ChannelWarningAcknowledge',
    ChannelWarningSend = 'ChannelWarningSend',
    ChannelHypeTrainBegin = 'ChannelHypeTrainBegin',
    ChannelHypeTrainProgress = 'ChannelHypeTrainProgress',
    ChannelHypeTrainEnd = 'ChannelHypeTrainEnd',
    ChannelCharityCampaignDonate = 'ChannelCharityCampaignDonate',
    ChannelCharityCampaignStart = 'ChannelCharityCampaignStart',
    ChannelCharityCampaignProgress = 'ChannelCharityCampaignProgress',
    ChannelCharityCampaignStop = 'ChannelCharityCampaignStop',
    ChannelShieldModeBegin = 'ChannelShieldModeBegin',
    ChannelShieldModeEnd = 'ChannelShieldModeEnd',
    ChannelShoutoutCreate = 'ChannelShoutoutCreate',
    ChannelShoutoutReceive = 'ChannelShoutoutReceive',
    ChannelGoalBegin = 'ChannelGoalBegin',
    ChannelGoalProgress = 'ChannelGoalProgress',
    ChannelGoalEnd = 'ChannelGoalEnd',
    StreamOnline = 'StreamOnline',
    StreamOffline = 'StreamOffline',
    UserUpdate = 'UserUpdate',
    UserWhisperMessage = 'UserWhisperMessage',
}

export enum TwitchScope {
    AnalyticsReadExtensions = 'AnalyticsReadExtensions',
    AnalyticsReadGames = 'AnalyticsReadGames',
    BitsRead = 'BitsRead',
    ChannelBot = 'ChannelBot',
    ChannelEditCommercial = 'ChannelEditCommercial',
    ChannelManageAds = 'ChannelManageAds',
    ChannelManageBroadcast = 'ChannelManageBroadcast',
    ChannelManageExtensions = 'ChannelManageExtensions',
    ChannelManageGuestStar = 'ChannelManageGuestStar',
    ChannelManageModerators = 'ChannelManageModerators',
    ChannelManagePolls = 'ChannelManagePolls',
    ChannelManagePredictions = 'ChannelManagePredictions',
    ChannelManageRaids = 'ChannelManageRaids',
    ChannelManageRedemptions = 'ChannelManageRedemptions',
    ChannelManageSchedule = 'ChannelManageSchedule',
    ChannelManageVideos = 'ChannelManageVideos',
    ChannelManageVips = 'ChannelManageVips',
    ChannelModerate = 'ChannelModerate',
    ChannelReadAds = 'ChannelReadAds',
    ChannelReadCharity = 'ChannelReadCharity',
    ChannelReadEditors = 'ChannelReadEditors',
    ChannelReadGoals = 'ChannelReadGoals',
    ChannelReadGuestStar = 'ChannelReadGuestStar',
    ChannelReadHypeTrain = 'ChannelReadHypeTrain',
    ChannelReadPolls = 'ChannelReadPolls',
    ChannelReadPredictions = 'ChannelReadPredictions',
    ChannelReadRedemptions = 'ChannelReadRedemptions',
    ChannelReadStreamKey = 'ChannelReadStreamKey',
    ChannelReadSubscriptions = 'ChannelReadSubscriptions',
    ChannelReadVips = 'ChannelReadVips',
    ClipsEdit = 'ClipsEdit',
    ModerationRead = 'ModerationRead',
    ModeratorManageAnnouncements = 'ModeratorManageAnnouncements',
    ModeratorManageAutomod = 'ModeratorManageAutomod',
    ModeratorManageAutomodSettings = 'ModeratorManageAutomodSettings',
    ModeratorManageBannedUsers = 'ModeratorManageBannedUsers',
    ModeratorManageBlockedTerms = 'ModeratorManageBlockedTerms',
    ModeratorManageChatMessages = 'ModeratorManageChatMessages',
    ModeratorManageChatSettings = 'ModeratorManageChatSettings',
    ModeratorManageGuestStar = 'ModeratorManageGuestStar',
    ModeratorManageShieldMode = 'ModeratorManageShieldMode',
    ModeratorManageShoutouts = 'ModeratorManageShoutouts',
    ModeratorManageUnbanRequests = 'ModeratorManageUnbanRequests',
    ModeratorManageWarnings = 'ModeratorManageWarnings',
    ModeratorReadAutomodSettings = 'ModeratorReadAutomodSettings',
    ModeratorReadBannedUsers = 'ModeratorReadBannedUsers',
    ModeratorReadBlockedTerms = 'ModeratorReadBlockedTerms',
    ModeratorReadChatMessages = 'ModeratorReadChatMessages',
    ModeratorReadChatSettings = 'ModeratorReadChatSettings',
    ModeratorReadChatters = 'ModeratorReadChatters',
    ModeratorReadFollowers = 'ModeratorReadFollowers',
    ModeratorReadGuestStar = 'ModeratorReadGuestStar',
    ModeratorReadModerators = 'ModeratorReadModerators',
    ModeratorReadShieldMode = 'ModeratorReadShieldMode',
    ModeratorReadShoutouts = 'ModeratorReadShoutouts',
    ModeratorReadSuspiciousUsers = 'ModeratorReadSuspiciousUsers',
    ModeratorReadUnbanRequests = 'ModeratorReadUnbanRequests',
    ModeratorReadVips = 'ModeratorReadVips',
    ModeratorReadWarnings = 'ModeratorReadWarnings',
    UserBot = 'UserBot',
    UserEdit = 'UserEdit',
    UserEditBroadcast = 'UserEditBroadcast',
    UserManageBlockedUsers = 'UserManageBlockedUsers',
    UserManageChatColor = 'UserManageChatColor',
    UserManageWhispers = 'UserManageWhispers',
    UserReadBlockedUsers = 'UserReadBlockedUsers',
    UserReadBroadcast = 'UserReadBroadcast',
    UserReadChat = 'UserReadChat',
    UserReadEmail = 'UserReadEmail',
    UserReadEmotes = 'UserReadEmotes',
    UserReadFollows = 'UserReadFollows',
    UserReadModeratedChannels = 'UserReadModeratedChannels',
    UserReadSubscriptions = 'UserReadSubscriptions',
    UserReadWhispers = 'UserReadWhispers',
    UserWriteChat = 'UserWriteChat',
}

export interface TwitchAuth {
    clientId: string;
    me: string;
    accessToken: string;
    refreshToken: string;
    scopes: TwitchScope[];
}

export interface TwitchProtocolChannel {
    name: string;
    eventSubscriptions: TwitchSubscriptionTopic[];
}

export interface TwitchProtocolConfiguration {
    $type: 'Twitch';
    auth: TwitchAuth;
    receiveEvents: boolean;
    channels: TwitchProtocolChannel[];
}

export interface AuthenticatePacket {
    $type: 'Authenticate';
    accessToken: string;
}

export interface LogLetter {
    $type: 'Log';
    id: string;
    timestamp: string;
    severity: LogSeverity;
    sourceType: LogSourceType;
    sourceId: string;
    category: string;
    text: string;
}

export interface ChatMessageLetter {
    $type: 'ChatMessage';
    content: ChatMessageDto;
}

export type Letter =
    LogLetter |
    ChatMessageLetter |
    { $type: string };

export interface MailPacket {
    $type: 'Mail';
    subscriptionId: string;
    letters: Letter[];
}

export type Packet =
    AuthenticatePacket |
    SubscribePacket |
    MailPacket |
    UnsubscribePacket |
    { $type: string };

export interface SubscribePacket {
    $type: 'Subscribe';
    id: string;
    topic: SubscriptionTopic;
    beforeId: string | null;
}

export interface LogFilter {
    severities: LogSeverity[] | null;
    sourceType: LogSourceType | null;
    sourceId: string | null;
    category: string | null;
}

export interface LogsSubscriptionTopic {
    $type: 'Logs';
    filter: LogFilter;
}

export interface ChatMessageFilter {
    connectionId: string | null;
}

export interface ChatMessagesSubscriptionTopic {
    $type: 'ChatMessages';
    filter: ChatMessageFilter;
}

export type SubscriptionTopic =
    LogsSubscriptionTopic |
    ChatMessagesSubscriptionTopic |
    { $type: string };

export interface UnsubscribePacket {
    $type: 'Unsubscribe';
    id: string;
}

export interface AttachmentDto {
    id: string;
    name: string | null;
    contentType: string;
}

export interface ChatterSummaryDto {
    id: string;
    name: string;
}

export interface ChatSummaryDto {
    id: string;
    name: string;
}

export interface ChatMessageDto {
    id: string;
    connectionId: string;
    timestamp: string;
    chat: ChatSummaryDto;
    author: ChatterSummaryDto;
    textContent: string | null;
    attachments: AttachmentDto[];
    isSpecial: boolean;
    isDirect: boolean;
    isMissed: boolean;
}

export enum ConnectionStatus {
    NotConnected = 'NotConnected',
    Connecting = 'Connecting',
    Connected = 'Connected',
    Reconnecting = 'Reconnecting',
    Stopping = 'Stopping',
    Error = 'Error',
}

export enum Protocol {
    Discord = 'Discord',
    Telegram = 'Telegram',
    Twitch = 'Twitch',
}

export interface ConnectionDto {
    id: string;
    name: string;
    protocol: Protocol;
    autoStart: boolean;
    config: ProtocolConfiguration;
    status: ConnectionStatus;
}

export interface SystemInfoDto {
    hostname: string;
    operatingSystem: string;
    arch: string;
    dotNetVersion: string;
    currentTime: string;
    uptime: number;
}

export interface NekoInfoDto {
    version: string;
    uptime: number;
}

export interface MessageStatsDto {
    messagesInLastMinute: number;
    messagesInLastHour: number;
    messagesInLastDay: number;
}

export interface EnvironmentInfoDto {
    system: SystemInfoDto;
    neko: NekoInfoDto;
    messageStats: MessageStatsDto;
}

export enum ScriptStatus {
    Stopped = 'Stopped',
    Starting = 'Starting',
    Running = 'Running',
    Restarting = 'Restarting',
    Stopping = 'Stopping',
    Error = 'Error',
}

export type ScriptCode =
    JsScriptCode |
    { $type: string };

export interface JsScriptCode {
    $type: 'JavaScript';
    source: string;
}

export interface ScriptDto {
    id: string;
    name: string;
    description: string;
    autoStart: boolean;
    code: ScriptCode;
    status: ScriptStatus;
}

export interface UserDto {
    id: string;
    login: string;
    displayName: string;
}

export enum LogSourceType {
    System = 'System',
    Connection = 'Connection',
    Script = 'Script',
}

export enum LogSeverity {
    Critical = 'Critical',
    Error = 'Error',
    Warning = 'Warning',
    Info = 'Info',
    Verbose = 'Verbose',
    Debug = 'Debug',
}
