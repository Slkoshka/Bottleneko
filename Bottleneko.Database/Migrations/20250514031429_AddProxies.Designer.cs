// <auto-generated />
using System;
using Bottleneko.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bottleneko.Database.Migrations
{
    [DbContext(typeof(NekoDbContext))]
    [Migration("20250514031429_AddProxies")]
    partial class AddProxies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatMessageAttachmentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<long>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageAttachments");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatMessageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOffline")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RemoteTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReplyToId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextContent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ChatId");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("RemoteTimestamp")
                        .IsDescending();

                    b.HasIndex("ReplyToId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatterEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBot")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.ToTable("Chatters");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ConnectionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoStart")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Extra")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.OptionEntity", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("DiscordGuildId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.HasIndex("ConnectionId", "DiscordChannelId", "DiscordGuildId")
                        .IsUnique();

                    b.ToTable("DiscordChats");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatMessageAttachmentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatMessageAttachmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordAttachmentId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("DiscordGuildId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageAttachmentId")
                        .IsUnique();

                    b.HasIndex("ConnectionId", "DiscordAttachmentId")
                        .IsUnique();

                    b.ToTable("DiscordMessageAttachments");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatMessageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("DiscordGuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordMessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId")
                        .IsUnique();

                    b.HasIndex("ConnectionId", "DiscordMessageId", "DiscordGuildId", "DiscordChannelId")
                        .IsUnique();

                    b.ToTable("DiscordChatMessages");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatterEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatterId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatterId")
                        .IsUnique();

                    b.HasIndex("ConnectionId", "DiscordUserId")
                        .IsUnique();

                    b.ToTable("DiscordChatters");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TelegramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.HasIndex("ConnectionId", "TelegramId")
                        .IsUnique();

                    b.ToTable("TelegramChats");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatMessageAttachmentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatMessageAttachmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelegramAttachmentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TelegramChatId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelegramFileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramFileUniqueId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TelegramMessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageAttachmentId")
                        .IsUnique();

                    b.HasIndex("ConnectionId", "TelegramMessageId", "TelegramChatId");

                    b.HasIndex("ConnectionId", "TelegramAttachmentType", "TelegramChatId", "TelegramMessageId")
                        .IsUnique();

                    b.ToTable("TelegramMessageAttachments");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatMessageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TelegramChatId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TelegramId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelegramMediaGroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId")
                        .IsUnique();

                    b.HasIndex("ConnectionId", "TelegramId", "TelegramChatId")
                        .IsUnique();

                    b.ToTable("TelegramChatMessages");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatterEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatterId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TelegramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatterId")
                        .IsUnique();

                    b.HasIndex("ConnectionId", "TelegramId")
                        .IsUnique();

                    b.ToTable("TelegramChatters");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Twitch.TwitchChatEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWhisper")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TwitchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.HasIndex("ConnectionId", "TwitchId", "IsWhisper")
                        .IsUnique();

                    b.ToTable("TwitchChats");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Twitch.TwitchChatMessageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWhisper")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TwitchChatId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId")
                        .IsUnique();

                    b.HasIndex("ConnectionId", "TwitchChatId", "TwitchId", "IsWhisper")
                        .IsUnique();

                    b.ToTable("TwitchChatMessages");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Twitch.TwitchChatterEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatterId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TwitchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChatterId")
                        .IsUnique();

                    b.HasIndex("ConnectionId", "TwitchId")
                        .IsUnique();

                    b.ToTable("TwitchChatters");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ProxyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuthRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Proxies");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ScriptEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoStart")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatMessageAttachmentEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ChatMessageEntity", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connection");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatMessageEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatterEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ChatEntity", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ChatMessageEntity", "ReplyTo")
                        .WithMany()
                        .HasForeignKey("ReplyToId");

                    b.Navigation("Author");

                    b.Navigation("Chat");

                    b.Navigation("Connection");

                    b.Navigation("ReplyTo");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatterEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatEntity", "Chat")
                        .WithOne("Discord")
                        .HasForeignKey("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatEntity", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatMessageAttachmentEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatMessageAttachmentEntity", "ChatMessageAttachment")
                        .WithOne("Discord")
                        .HasForeignKey("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatMessageAttachmentEntity", "ChatMessageAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessageAttachment");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatMessageEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatMessageEntity", "ChatMessage")
                        .WithOne("Discord")
                        .HasForeignKey("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatMessageEntity", "ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessage");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatterEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatterEntity", "Chatter")
                        .WithOne("Discord")
                        .HasForeignKey("Bottleneko.Database.Schema.Protocols.Discord.DiscordChatterEntity", "ChatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chatter");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatEntity", "Chat")
                        .WithOne("Telegram")
                        .HasForeignKey("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatEntity", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatMessageAttachmentEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatMessageAttachmentEntity", "ChatMessageAttachment")
                        .WithOne("Telegram")
                        .HasForeignKey("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatMessageAttachmentEntity", "ChatMessageAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessageAttachment");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatMessageEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatMessageEntity", "ChatMessage")
                        .WithOne("Telegram")
                        .HasForeignKey("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatMessageEntity", "ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessage");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatterEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatterEntity", "Chatter")
                        .WithOne("Telegram")
                        .HasForeignKey("Bottleneko.Database.Schema.Protocols.Telegram.TelegramChatterEntity", "ChatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chatter");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Twitch.TwitchChatEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatEntity", "Chat")
                        .WithOne("Twitch")
                        .HasForeignKey("Bottleneko.Database.Schema.Protocols.Twitch.TwitchChatEntity", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Twitch.TwitchChatMessageEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatMessageEntity", "ChatMessage")
                        .WithOne("Twitch")
                        .HasForeignKey("Bottleneko.Database.Schema.Protocols.Twitch.TwitchChatMessageEntity", "ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessage");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.Protocols.Twitch.TwitchChatterEntity", b =>
                {
                    b.HasOne("Bottleneko.Database.Schema.ChatterEntity", "Chatter")
                        .WithOne("Twitch")
                        .HasForeignKey("Bottleneko.Database.Schema.Protocols.Twitch.TwitchChatterEntity", "ChatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bottleneko.Database.Schema.ConnectionEntity", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chatter");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatEntity", b =>
                {
                    b.Navigation("Discord");

                    b.Navigation("Telegram");

                    b.Navigation("Twitch");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatMessageAttachmentEntity", b =>
                {
                    b.Navigation("Discord");

                    b.Navigation("Telegram");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatMessageEntity", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Discord");

                    b.Navigation("Telegram");

                    b.Navigation("Twitch");
                });

            modelBuilder.Entity("Bottleneko.Database.Schema.ChatterEntity", b =>
                {
                    b.Navigation("Discord");

                    b.Navigation("Telegram");

                    b.Navigation("Twitch");
                });
#pragma warning restore 612, 618
        }
    }
}
